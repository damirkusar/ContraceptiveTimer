package ch.kusar.contraceptivetimer.test.retriever;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Calendar;
import java.util.GregorianCalendar;

import junit.framework.Assert;
import android.test.AndroidTestCase;
import ch.kusar.contraceptivetimer.businessobjects.AlarmEventData;
import ch.kusar.contraceptivetimer.businessobjects.ContraceptiveType;
import ch.kusar.contraceptivetimer.calculator.AlarmCalculationData;
import ch.kusar.contraceptivetimer.calculator.AlarmDataCalculator;
import ch.kusar.contraceptivetimer.calculator.AlarmTime;
import ch.kusar.contraceptivetimer.retriever.AlarmEventRetriever;
import ch.kusar.contraceptivetimer.wrapper.InternalStorageWrapper;
import ch.kusar.test.calendarWrapper.CalendarWrapperForTest;

public class AlarmEventRetrieverTest extends AndroidTestCase {

	private AlarmEventRetriever alarmEventRetriever;
	private GregorianCalendar cal;
	private AlarmCalculationData alarmCalculationData;
	private InternalStorageWrapper internalStorageWrapper;
	private SecureRandom random;
	private GregorianCalendar calendar;

	@Override
	public void setUp() {
		this.random = new SecureRandom();

		this.alarmEventRetriever = new AlarmEventRetriever();
		this.cal = CalendarWrapperForTest.getActualCalendarWithoutHourMinutesSeconds();

		this.internalStorageWrapper = new InternalStorageWrapper(this.getContext().getApplicationContext());

		this.alarmCalculationData = new AlarmCalculationData();
		this.alarmCalculationData.setContraceptiveType(ContraceptiveType.CONTRACEPTION_RING);
		this.alarmCalculationData.setAlarmActive(true);
		this.alarmCalculationData.setAlarmTime(new AlarmTime(20, 0));
	}

	@Override
	public void tearDown() {

	}
	
	private void setupCalendarWithLastBreakAgoInDays(int lastBreakAgoInDays,
			ContraceptiveType contraceptiveType) {

		this.calendar = CalendarWrapperForTest
				.getActualCalendarWithoutHourMinutesSeconds();

		this.calendar.set(Calendar.DAY_OF_YEAR,
				this.calendar.get(Calendar.DAY_OF_YEAR) - lastBreakAgoInDays);

		this.alarmCalculationData.setLastBreakDayOfYear(this.calendar
				.get(Calendar.DAY_OF_YEAR));
		this.alarmCalculationData.setContraceptiveType(contraceptiveType);

		this.alarmCalculationData.setAlarmTime(new AlarmTime(20, 0));
	}

	public void testRetrieveAlarmEventData_AlarmCalculationDataFileIsAvailable_ShouldReturnNull() {
		this.internalStorageWrapper.setFileName(new BigInteger(130, this.random).toString(32));

		AlarmCalculationData alarmDataLoaded = this.internalStorageWrapper.loadFromStorage();

		Assert.assertNull(alarmDataLoaded);
	}

	public void testRetrieveAlarmEventData_AlarmCalculationDataFileIsAvailable_ShouldNotReturnNull() {
		this.internalStorageWrapper.saveToStorage(this.alarmCalculationData);
		AlarmEventData alarmEventData = this.alarmEventRetriever.retrieveAlarmEventData();

		Assert.assertNotNull(alarmEventData);
	}

}
