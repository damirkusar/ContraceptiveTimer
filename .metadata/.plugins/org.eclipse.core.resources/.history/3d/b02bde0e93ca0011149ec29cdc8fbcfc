package ch.kusar.contraceptivetimer.test.wrapper;

import static junit.framework.Assert.*;

import java.io.IOException;
import java.util.Date;

import org.junit.Test;

import android.test.AndroidTestCase;
import android.test.mock.MockContext;
import ch.kusar.contraceptivetimer.businessobjects.AlarmData;
import ch.kusar.contraceptivetimer.businessobjects.ContraceptiveType;
import ch.kusar.contraceptivetimer.wrapper.InternalStorageWrapper;

public class InternalStorageWrapperTest extends AndroidTestCase{
	
	private InternalStorageWrapper internalStorageWrapper;
	private AlarmData alarmData;
	private Date date;
	private long startTime;
	private long alarmTime;
	
	
	@Override
	public void setUp() throws Exception {
		this.date = new Date();
		this.startTime = this.date.getTime();
		this.date.setMinutes(this.date.getMinutes() + 1);
		this.alarmTime = this.startTime + this.date.getTime();
		
		this.internalStorageWrapper = new InternalStorageWrapper(getContext().getApplicationContext());
		
		this.alarmData = new AlarmData();
		this.alarmData.setStartTime(startTime);
		this.alarmData.setContraceptiveType(ContraceptiveType.CONTRACEPTION_RING);
		this.alarmData.setAlarmTime(alarmTime);
	}

	@Override
	public void tearDown() throws Exception {
		this.alarmData = null;
		this.internalStorageWrapper = null;
	}

	public void testSaveToStorage_StoresTheFileToInternalStorage_ShouldBeSavedToStorageWithoutError() {
		assertTrue(this.internalStorageWrapper.saveToStorage(this.alarmData));
	}
	
	public void testLoadFromStorage_LoadsStoredFileIntoObject_ShouldLoadTheSavedDataCorrectly(){
		this.internalStorageWrapper.saveToStorage(this.alarmData);
		AlarmData alarmDataLoaded = this.internalStorageWrapper.loadFromStorage();
		
		assertEquals(this.startTime, alarmDataLoaded.getStartTime());
		assertEquals(this.alarmTime, alarmDataLoaded.getAlarmTime());
		assertEquals(this.alarmData.getContraceptiveType(), ContraceptiveType.CONTRACEPTION_RING);
		assertEquals(21, alarmDataLoaded.getIntervalDays());
	}
	
	public void testLoadFromStorage_LoadsStoredFileIntoObject_ShouldReturnNullObject() {
	try{
		this.internalStorageWrapper.loadFromStorage();
	}
	}
}
