package ch.kusar.contraceptivetimer.test.businessobjects;

import java.util.Calendar;

import junit.framework.Assert;
import android.test.AndroidTestCase;
import ch.kusar.contraceptivetimer.businessobjects.AlarmData;
import ch.kusar.contraceptivetimer.businessobjects.AlarmDataCalculator;
import ch.kusar.contraceptivetimer.businessobjects.AlarmEventData;
import ch.kusar.contraceptivetimer.businessobjects.AlarmMessage;
import ch.kusar.contraceptivetimer.businessobjects.ContraceptiveType;
import ch.kusar.test.calendarWrapper.CalendarWrapperForTest;

public class AlarmDataCalculatorTest extends AndroidTestCase {

	AlarmData alarmData;
	AlarmDataCalculator alarmDataCalculator;
	Calendar calendar;

	@Override
	public void setUp() throws Exception {
		super.setUp();

		this.alarmData = new AlarmData();
	}

	@Override
	public void tearDown() throws Exception {
		super.tearDown();
		this.alarmData = null;
		this.alarmDataCalculator = null;
	}

	private void setupCalendarWithLastBreakAgoInDays(int lastBreakAgoInDays,
			ContraceptiveType contraceptiveType) {

		this.calendar = CalendarWrapperForTest
				.getActualCalendarWithoutHourMinutesSeconds();

		this.calendar.set(Calendar.DAY_OF_YEAR,
				this.calendar.get(Calendar.DAY_OF_YEAR) - lastBreakAgoInDays);
		this.calendar.set(Calendar.MINUTE,
				this.calendar.get(Calendar.MINUTE) - 5);

		this.alarmData.setLastBreak(this.calendar);
		this.alarmData.setContraceptiveType(contraceptiveType);

		Calendar alarmCalendar = this.calendar;

		this.alarmData.setAlarmTime(alarmCalendar);

		this.alarmDataCalculator = new AlarmDataCalculator(this.alarmData);
	}

	private void setupAlarmData(ContraceptiveType contraceptiveType,
			Calendar lastUseOfContraceptive, Calendar lastBreak,
			Calendar alarmTime, boolean isAlarmActive) {
		this.alarmData.setContraceptiveType(contraceptiveType);
		this.alarmData.setLastUseOfContraceptive(lastUseOfContraceptive);
		this.alarmData.setLastBreak(lastBreak);
		this.alarmData.setAlarmTime(alarmTime);
		this.alarmData.setAlarmActive(isAlarmActive);

		this.alarmDataCalculator = new AlarmDataCalculator(this.alarmData);
	}

	public void testNumberOfDaysSinceLastBreak_StartTimeAndLastBreakIs1DayAgo_Expected1() {
		this.setupCalendarWithLastBreakAgoInDays(1,
				ContraceptiveType.CONTRACEPTION_PILL);

		int numberOfDaysSinceLastBreak = this.alarmDataCalculator
				.getNumberOfDaysSinceLastBreak();

		Assert.assertEquals(1, numberOfDaysSinceLastBreak);
	}

	public void testNumberOfDaysSinceLastBreak_StartTimeAndLastBreakIs7DaysAgo_Expected7() {
		this.setupCalendarWithLastBreakAgoInDays(7,
				ContraceptiveType.CONTRACEPTION_PATCH);

		this.alarmData.setLastBreak(this.calendar);

		int numberOfDaysSinceLastBreak = this.alarmDataCalculator
				.getNumberOfDaysSinceLastBreak();

		Assert.assertEquals(7, numberOfDaysSinceLastBreak);
	}

	public void testNumberOfDaysSinceLastBreak_StartTimeAndLastBreakIs21DaysAgo_Expected21() {
		this.setupCalendarWithLastBreakAgoInDays(21,
				ContraceptiveType.CONTRACEPTION_RING);

		int numberOfDaysSinceLastBreak = this.alarmDataCalculator
				.getNumberOfDaysSinceLastBreak();

		Assert.assertEquals(21, numberOfDaysSinceLastBreak);
	}

	public void testNextAlarmEvent_LastUseWasLastSundayAndLastBreakSundayAWeekAgoAndContraceptiveTypeIsRing_ExpectedMessageForRemoveRingAndCalendarDayIsLastSundayIn21Days() {
		Calendar lastSunday = CalendarWrapperForTest.getLastSunday();

		Assert.assertEquals(221, lastSunday.get(Calendar.DAY_OF_YEAR));

		this.setupAlarmData(ContraceptiveType.CONTRACEPTION_RING, lastSunday,
				CalendarWrapperForTest.getSundayWeekAgo(),
				CalendarWrapperForTest.getAlarmTimeAt8PM(), true);

		AlarmEventData alarmEventData = this.alarmDataCalculator
				.getNextAlarmEvent();

		Assert.assertEquals(AlarmMessage.getRingRemoveMessage(),
				alarmEventData.getAlarmMessage());

		Assert.assertEquals(lastSunday.get(Calendar.DAY_OF_YEAR),
				alarmEventData.getAlarm().get(Calendar.DAY_OF_YEAR));
	}

	public void testLastTodaysDayOfYear() {
		Assert.assertEquals(221, CalendarWrapperForTest.getTodaysDayOfYear());
	}

	public void testLastSunday() {
		Assert.assertEquals(218,
				CalendarWrapperForTest.getLastSunday()
						.get(Calendar.DAY_OF_YEAR));
	}

	public void testLastSundayWeekAgo() {
		Assert.assertEquals(
				211,
				CalendarWrapperForTest.getSundayWeekAgo().get(
						Calendar.DAY_OF_YEAR));
	}
}