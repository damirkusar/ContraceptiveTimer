package ch.kusar.test.calendarWrapper;

import java.util.Calendar;
import java.util.GregorianCalendar;

import ch.kusar.calendarWrapper.CalendarWrapper;

public class CalendarWrapperForTest {

	public static GregorianCalendar getActualCalendarWithoutHourMinutesSeconds() {
		return CalendarWrapperForTest
				.convertToCalendarWithoutHourMinutesSeconds(new GregorianCalendar());
	}

	private static GregorianCalendar convertToCalendarWithoutHourMinutesSeconds(
			Calendar calendar) {
		Calendar cal = calendar;

		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);

		return (GregorianCalendar) cal;
	}

	public static Calendar getLastSunday() {
		int todaysWeekDay = CalendarWrapperForTest
				.getActualCalendarWithoutHourMinutesSeconds().get(
						Calendar.DAY_OF_WEEK);

		Calendar calendar = CalendarWrapperForTest
				.getActualCalendarWithoutHourMinutesSeconds();
		calendar.set(Calendar.DAY_OF_YEAR, (calendar.get(Calendar.DAY_OF_YEAR)
				- todaysWeekDay));
		return calendar;
	}

	public static Calendar getSundayWeekAgo() {
		int todaysWeekDay = CalendarWrapperForTest
				.getActualCalendarWithoutHourMinutesSeconds().get(
						Calendar.DAY_OF_WEEK);

		Calendar calendar = CalendarWrapperForTest
				.getActualCalendarWithoutHourMinutesSeconds();
		calendar.set(Calendar.DAY_OF_YEAR, calendar.get(Calendar.DAY_OF_YEAR)
				- todaysWeekDay - 7);
		return calendar;
	}

	public static Calendar getAlarmTimeAt8PM() {
		Calendar calendar = CalendarWrapperForTest
				.getActualCalendarWithoutHourMinutesSeconds();
		calendar.set(Calendar.HOUR_OF_DAY, 20);
		return calendar;
	}

	public static int getTodaysDayOfYear() {
		return CalendarWrapper.getActualCalendarWithoutHourMinutesSeconds()
				.get(Calendar.DAY_OF_YEAR);
	}
}
