package ch.kusar.contraceptivetimer.test.retriever;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Calendar;
import java.util.GregorianCalendar;

import junit.framework.Assert;
import android.test.AndroidTestCase;
import ch.kusar.contraceptivetimer.businessobjects.AlarmEventData;
import ch.kusar.contraceptivetimer.businessobjects.ContraceptiveType;
import ch.kusar.contraceptivetimer.calculator.AlarmCalculationData;
import ch.kusar.contraceptivetimer.calculator.AlarmDataCalculator;
import ch.kusar.contraceptivetimer.calculator.AlarmTime;
import ch.kusar.contraceptivetimer.retriever.AlarmEventRetriever;
import ch.kusar.contraceptivetimer.wrapper.InternalStorageWrapper;
import ch.kusar.test.calendarWrapper.CalendarWrapperForTest;

public class AlarmEventRetrieverTest extends AndroidTestCase {

	private AlarmEventRetriever alarmEventRetriever;
	private AlarmCalculationData alarmCalculationData;
	private InternalStorageWrapper internalStorageWrapper;
	private SecureRandom random;

	@Override
	public void setUp() {
		this.alarmEventRetriever = new AlarmEventRetriever();
		this.alarmCalculationData = new AlarmCalculationData();
		this.internalStorageWrapper = new InternalStorageWrapper(this.getContext().getApplicationContext());
		this.random = new SecureRandom();
	}

	@Override
	public void tearDown() {
		this.alarmEventRetriever = null;
		this.alarmCalculationData = null;
		this.internalStorageWrapper = null;
		this.random = null;
	}

	public void testRetrieveAlarmEventData_AlarmCalculationDataFileIsAvailable_ShouldReturnNull() {
		this.internalStorageWrapper.setFileName(new BigInteger(130, this.random).toString(32));

		AlarmCalculationData alarmDataLoaded = this.internalStorageWrapper.loadFromStorage();

		Assert.assertNull(alarmDataLoaded);
	}

	public void testRetrieveAlarmEventData_AlarmCalculationDataFileIsAvailable_ShouldNotReturnNull() {
		this.internalStorageWrapper.saveToStorage(this.alarmCalculationData);
		AlarmEventData alarmEventData = this.alarmEventRetriever.retrieveAlarmEventData();

		Assert.assertNotNull(alarmEventData);
	}

	public void testRetrieveAlarmEventData_AlarmCalculationDataFileIsAvailableDefaultData_ShouldReturnExpectedData() {
				AlarmCalculationData acd = this.setupAlarmData(ContraceptiveType.CONTRACEPTION_RING, 0, 0);

		AlarmDataCalculator alarmDataCalculator = new AlarmDataCalculator(acd);
		AlarmEventData alarmEventDataFromCalculator = alarmDataCalculator.getNextAlarmEvent();

		this.internalStorageWrapper.saveToStorage(acd);

		AlarmEventData alarmEventDataFromRetriever = this.alarmEventRetriever.retrieveAlarmEventData();

		Assert.assertNotNull(alarmEventDataFromCalculator);
		Assert.assertNotNull(alarmEventDataFromRetriever);

		Assert.assertEquals(alarmEventDataFromCalculator.getAlarmMessage(), alarmEventDataFromRetriever.getAlarmMessage());
		Assert.assertEquals(alarmEventDataFromCalculator.getEventType(), alarmEventDataFromRetriever.getEventType());
		Assert.assertEquals(alarmEventDataFromCalculator.getAlarmTimeInMilliSeconds(), alarmEventDataFromRetriever.getAlarmTimeInMilliSeconds());
		
		Assert.assertEquals(expected, alarmEventDataFromRetriever.)
	}

	public void testRetrieveAlarmEventData_AlarmCalculationDataFileIsAvailableWithValidData_ShouldReturnExpectedData() {
		GregorianCalendar lastSunday = CalendarWrapperForTest.getLastSunday();
		GregorianCalendar sundayWeekAgo = CalendarWrapperForTest.getSundayOneWeekAgo();

		GregorianCalendar nextBreakFromLastUse = (GregorianCalendar) lastSunday.clone();
		nextBreakFromLastUse.add(Calendar.DAY_OF_YEAR, 21);
		nextBreakFromLastUse.set(Calendar.HOUR_OF_DAY, 20);
		GregorianCalendar nextBreakFromLastBreak = (GregorianCalendar) sundayWeekAgo.clone();
		nextBreakFromLastBreak.add(Calendar.DAY_OF_YEAR, 28);
		nextBreakFromLastBreak.set(Calendar.HOUR_OF_DAY, 20);
		Assert.assertEquals(nextBreakFromLastBreak, nextBreakFromLastUse);

		AlarmCalculationData acd = this.setupAlarmData(ContraceptiveType.CONTRACEPTION_RING, lastSunday.get(Calendar.DAY_OF_YEAR),
				sundayWeekAgo.get(Calendar.DAY_OF_YEAR));

		AlarmDataCalculator alarmDataCalculator = new AlarmDataCalculator(acd);
		AlarmEventData alarmEventDataFromCalculator = alarmDataCalculator.getNextAlarmEvent();

		this.internalStorageWrapper.saveToStorage(acd);

		AlarmEventData alarmEventDataFromRetriever = this.alarmEventRetriever.retrieveAlarmEventData();

		Assert.assertNotNull(alarmEventDataFromCalculator);
		Assert.assertNotNull(alarmEventDataFromRetriever);

		Assert.assertEquals(alarmEventDataFromCalculator.getAlarmMessage(), alarmEventDataFromRetriever.getAlarmMessage());
		Assert.assertEquals(alarmEventDataFromCalculator.getEventType(), alarmEventDataFromRetriever.getEventType());
		Assert.assertEquals(alarmEventDataFromCalculator.getAlarmTimeInMilliSeconds(), alarmEventDataFromRetriever.getAlarmTimeInMilliSeconds());
	}

	private AlarmCalculationData setupAlarmData(ContraceptiveType contraceptiveType, int lastUseOfContraceptiveCalendar, int lastBreakDayOfYearCalendar) {

		AlarmCalculationData acd = new AlarmCalculationData();

		acd.setContraceptiveType(contraceptiveType);
		acd.setLastUseOfContraceptiveDayOfYear(lastUseOfContraceptiveCalendar);
		acd.setLastBreakDayOfYear(lastBreakDayOfYearCalendar);
		acd.setAlarmTime(new AlarmTime(20, 0));
		acd.setAlarmActive(true);

		return acd;
	}

}
