package ch.kusar.contraceptivetimer.businessobjects;

import java.util.Calendar;

import ch.kusar.calendarWrapper.CalendarWrapper;

public class AlarmDataCalculator {

	private AlarmData alarmData;

	public AlarmDataCalculator(AlarmData alarmData) {
		this.setAlarmData(alarmData);
	}

	public AlarmData getAlarmData() {
		return this.alarmData;
	}

	public void setAlarmData(AlarmData alarmData) {
		this.alarmData = alarmData;
	}

	public int getNumberOfDaysSinceLastBreak() {
		Calendar actulCalendar = CalendarWrapper.getActualCalendar();

		Calendar lastBreakCalendar = this.alarmData.getLastBreak();

		return (int) ((actulCalendar.getTimeInMillis() - lastBreakCalendar
				.getTimeInMillis()) / this.alarmData.getMillisecondsinday());
	}

	public boolean isTimeToMakeSevenDaysBreak() {
		if (this.getNumberOfDaysSinceLastBreak()
				- this.alarmData
						.getNumberOfDaysToMakeSevenDaysBreakAfterBreak() == 0) {
			return true;
		}
		return false;
	}

	private AlarmEventData getNextBreakAlarmEvent() {
		AlarmEventData alarmEventData = new AlarmEventData();

		if (this.alarmData.getContraceptiveType() == ContraceptiveType.CONTRACEPTION_RING) {
			alarmEventData.setAlarmMessage(AlarmMessage.getRingRemoveMessage());
		}
		if (this.alarmData.getContraceptiveType() == ContraceptiveType.CONTRACEPTION_PATCH) {
			alarmEventData
					.setAlarmMessage(AlarmMessage.getPatchRemoveMessage());
		}
		if (this.alarmData.getContraceptiveType() == ContraceptiveType.CONTRACEPTION_PILL) {
			alarmEventData.setAlarmMessage(AlarmMessage.getPillRemoveMessage());
		}

		alarmEventData.setAlarm(CalendarWrapper
				.getActualCalendarWithoutHourMinutesSeconds());

		alarmEventData.getAlarm().set(Calendar.DAY_OF_YEAR,
				this.alarmData.getAlarmTime().get(Calendar.DAY_OF_YEAR) + 28);

		alarmEventData.getAlarm().set(Calendar.HOUR_OF_DAY,
				this.alarmData.getAlarmTime().get(Calendar.HOUR_OF_DAY));
		alarmEventData.getAlarm().set(Calendar.MINUTE,
				this.alarmData.getAlarmTime().get(Calendar.MINUTE));
		return alarmEventData;
	}
	
	private AlarmEventData getNextChangeAlarmEvent() {
		AlarmEventData alarmEventData = new AlarmEventData();

		if (this.alarmData.getContraceptiveType() == ContraceptiveType.CONTRACEPTION_RING) {
			alarmEventData.setAlarmMessage(AlarmMessage.getRingChangeMessage());
		}
		if (this.alarmData.getContraceptiveType() == ContraceptiveType.CONTRACEPTION_PATCH) {
			alarmEventData
					.setAlarmMessage(AlarmMessage.getPatchChangeMessage());
		}
		if (this.alarmData.getContraceptiveType() == ContraceptiveType.CONTRACEPTION_PILL) {
			alarmEventData.setAlarmMessage(AlarmMessage.getPillChangeMessage());
		}

		alarmEventData.setAlarm(CalendarWrapper
				.getActualCalendarWithoutHourMinutesSeconds());

		alarmEventData.getAlarm().set(Calendar.DAY_OF_YEAR,
				this.alarmData.getAlarmTime().get(Calendar.DAY_OF_YEAR) + 28);

		alarmEventData.getAlarm().set(Calendar.HOUR_OF_DAY,
				this.alarmData.getAlarmTime().get(Calendar.HOUR_OF_DAY));
		alarmEventData.getAlarm().set(Calendar.MINUTE,
				this.alarmData.getAlarmTime().get(Calendar.MINUTE));
		return alarmEventData;
	}
	
	private boolean isNextEventABreakAlarmEvent() {
		int todaysDayOfYear = CalendarWrapper.getTodaysDayOfYear();
		int nextBreakDayOfYear = 
		
		return false;
	}

	public AlarmEventData getNextAlarmEvent() {

		if (this.alarmData.getContraceptiveType() == ContraceptiveType.CONTRACEPTION_RING) {
		}
		if (this.alarmData.getContraceptiveType() == ContraceptiveType.CONTRACEPTION_PATCH) {
		}
		if (this.alarmData.getContraceptiveType() == ContraceptiveType.CONTRACEPTION_PILL) {
		}

		if (this.isTimeToMakeSevenDaysBreak()) {
			return this.alarmEventDataForBreak();
		}

		// todo

		return null;
	}

	public Calendar getLastCalendarDayForAlarm() {
		Calendar lastBreakCalendarDay = this.alarmData.getLastBreak();

		if (this.alarmData.getContraceptiveType() == ContraceptiveType.CONTRACEPTION_RING) {
			int oneWeek = 7;
			lastBreakCalendarDay.set(Calendar.DAY_OF_YEAR, this.alarmData
					.getLastBreak().get(Calendar.DAY_OF_YEAR) + oneWeek);
		}
		if (this.alarmData.getContraceptiveType() == ContraceptiveType.CONTRACEPTION_PATCH) {
			int threeWeeks = 21;
			lastBreakCalendarDay.set(Calendar.DAY_OF_YEAR, this.alarmData
					.getLastBreak().get(Calendar.DAY_OF_YEAR) + threeWeeks);
		}
		if (this.alarmData.getContraceptiveType() == ContraceptiveType.CONTRACEPTION_PILL) {
			int fourWeeks = 28;
			lastBreakCalendarDay.set(Calendar.DAY_OF_YEAR, this.alarmData
					.getLastBreak().get(Calendar.DAY_OF_YEAR) + fourWeeks);
		}
		return lastBreakCalendarDay;
	}

	public Calendar getFirstAlarmCalendarDayAfterBreak() {
		Calendar firstAlarmCalendarDayForAlarm = this.alarmData.getLastBreak();

		int fourWeeks = 35;
		firstAlarmCalendarDayForAlarm.set(Calendar.DAY_OF_YEAR, this.alarmData
				.getLastBreak().get(Calendar.DAY_OF_YEAR) + fourWeeks);

		return firstAlarmCalendarDayForAlarm;
	}
}
