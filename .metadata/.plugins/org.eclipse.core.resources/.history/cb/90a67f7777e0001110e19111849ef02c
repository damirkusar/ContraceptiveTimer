package ch.kusar.contraceptivetimer.businessobjects;

import java.util.Calendar;
import java.util.GregorianCalendar;

import ch.kusar.calendarWrapper.CalendarWrapper;

public class AlarmDataCalculator {
	
	private AlarmData alarmData;
	
	public AlarmDataCalculator(AlarmData alarmData) {
		this.setAlarmData(alarmData);
	}
	
	
	public int getNumberOfDaysSinceLastBreak() {
		Calendar actulCalendar = CalendarWrapper.getActualCalendar();

		Calendar lastBreakCalendar = this.lastBreak;

		return (int) ((actulCalendar.getTimeInMillis() - lastBreakCalendar
				.getTimeInMillis()) / AlarmData.millisecondsInDay);
	}

	public boolean isTimeToMakeSevenDaysBreak() {
		if (this.getNumberOfDaysSinceLastBreak()
				- AlarmData.numberOfDaysToMakeSevenDaysBreak == 0) {
			return true;
		}
		return false;
	}

	public Calendar getNextCalendarDayForAlarm() {
		Calendar actulCalendar = CalendarWrapper.getActualCalendar();

		Calendar lastBreakCalendar = this.lastBreak;

		long subtratedCalendarInMillis = actulCalendar.getTimeInMillis()
				- lastBreakCalendar.getTimeInMillis();
		Calendar subtratedCalendar = new GregorianCalendar();
		subtratedCalendar.setTimeInMillis(subtratedCalendarInMillis);

		// todo

		return null;
	}

	public Calendar getLastCalendarDayForAlarm() {
		Calendar lastAlarmCalendarDay = this.lastBreak;

		if (this.contraceptiveType == ContraceptiveType.CONTRACEPTION_RING) {
			int oneWeek = 7;
			lastAlarmCalendarDay.set(Calendar.DAY_OF_YEAR,
					this.lastBreak.get(Calendar.DAY_OF_YEAR) + oneWeek);
		}
		if (this.contraceptiveType == ContraceptiveType.CONTRACEPTION_PATCH) {
			int threeWeeks = 21;
			lastAlarmCalendarDay.set(Calendar.DAY_OF_YEAR,
					this.lastBreak.get(Calendar.DAY_OF_YEAR) + threeWeeks);
		}
		if (this.contraceptiveType == ContraceptiveType.CONTRACEPTION_PILL) {
			int fourWeeks = 28;
			lastAlarmCalendarDay.set(Calendar.DAY_OF_YEAR,
					this.lastBreak.get(Calendar.DAY_OF_YEAR) + fourWeeks);
		}
		return lastAlarmCalendarDay;
	}

	public Calendar getFirstAlarmCalendarDayAfterBreak() {
		Calendar firstAlarmCalendarDayForAlarm = this.lastBreak;

		int fourWeeks = 35;
		firstAlarmCalendarDayForAlarm.set(Calendar.DAY_OF_YEAR,
				this.lastBreak.get(Calendar.DAY_OF_YEAR) + fourWeeks);

		return firstAlarmCalendarDayForAlarm;
	}
}
