package ch.kusar.contraceptivetimer.test.businessobjects;

import java.util.Calendar;

import junit.framework.Assert;
import android.test.AndroidTestCase;
import ch.kusar.calendarWrapper.CalendarWrapper;
import ch.kusar.contraceptivetimer.businessobjects.AlarmData;
import ch.kusar.contraceptivetimer.businessobjects.ContraceptiveType;
import ch.kusar.contraceptivetimer.wrapper.InternalStorageWrapper;

public class AlarmDataTest extends AndroidTestCase {

	AlarmData alarmData;
	InternalStorageWrapper internalStorageWrapper;
	Calendar calendar;

	@Override
	public void setUp() throws Exception {
		super.setUp();

		this.calendar = CalendarWrapper.getActualCalendar();
		Calendar startCalendar = this.calendar;

		this.calendar.set(Calendar.MINUTE,
				this.calendar.get(Calendar.MINUTE) + 1);

		Calendar alarmCalendar = this.calendar;

		this.alarmData = new AlarmData();
		this.alarmData.setStartTime(startCalendar);
		this.alarmData.setAlarmTime(alarmCalendar);

		this.internalStorageWrapper = new InternalStorageWrapper(this
				.getContext().getApplicationContext());
	}

	@Override
	public void tearDown() throws Exception {
		super.tearDown();
		this.alarmData = null;
		this.internalStorageWrapper = null;
	}

	public void testGetIntervalDays_TypeIsRing_Returns21() {
		this.alarmData
				.setContraceptiveType(ContraceptiveType.CONTRACEPTION_RING);

		Assert.assertEquals(21, this.alarmData.getIntervalDays());
	}

	public void testGetIntervalDays_TypeIsPill_Returns1() {
		this.alarmData
				.setContraceptiveType(ContraceptiveType.CONTRACEPTION_PILL);

		Assert.assertEquals(1, this.alarmData.getIntervalDays());
	}

	public void testGetIntervalDays_TypeIsPatch_Returns7() {
		this.alarmData
				.setContraceptiveType(ContraceptiveType.CONTRACEPTION_PATCH);

		Assert.assertEquals(7, this.alarmData.getIntervalDays());
	}

	public void testNumberOfDaysSinceLastBreak_StartTimeAndLastBreakIs1DayAgo_Expected1() {
		this.setupCalendarWithLastBreakAgoInDays(1,
				ContraceptiveType.CONTRACEPTION_PILL);

		int numberOfDaysSinceLastBreak = this.alarmData
				.getNumberOfDaysSinceLastBreak();

		Assert.assertEquals(1, numberOfDaysSinceLastBreak);
	}

	public void testNumberOfDaysSinceLastBreak_StartTimeAndLastBreakIs7DaysAgo_Expected7() {
		this.setupCalendarWithLastBreakAgoInDays(7,
				ContraceptiveType.CONTRACEPTION_PATCH);

		this.alarmData.setLastBreak(this.calendar);

		int numberOfDaysSinceLastBreak = this.alarmData
				.getNumberOfDaysSinceLastBreak();

		Assert.assertEquals(7, numberOfDaysSinceLastBreak);
	}

	public void testNumberOfDaysSinceLastBreak_StartTimeAndLastBreakIs21DaysAgo_Expected21() {
		this.setupCalendarWithLastBreakAgoInDays(21,
				ContraceptiveType.CONTRACEPTION_RING);

		int numberOfDaysSinceLastBreak = this.alarmData
				.getNumberOfDaysSinceLastBreak();

		Assert.assertEquals(21, numberOfDaysSinceLastBreak);
	}

	public void testIsTimeToMakeSevenDaysBreak_LastBreakIs21DaysAgo_ExpectedTrue() {
		this.setupCalendarWithLastBreakAgoInDays(21,
				ContraceptiveType.CONTRACEPTION_RING);

		this.alarmData.getNumberOfDaysSinceLastBreak();

		Assert.assertTrue(this.alarmData.isTimeToMakeSevenDaysBreak());
	}

	public void testGetNextCalendarForAlarm_LastBreakIs21DaysAgoAndTypeIsRing_ExpectedCalendar21DaysAgo() {
		this.setupCalendarWithLastBreakAgoInDays(21,
				ContraceptiveType.CONTRACEPTION_RING);
		// Calendar nextCalendarDay =
		// this.alarmData.getNextCalendarDayForAlarm();
		//
		// Assert.assertEquals(CalendarWrapper.getActualCalendar(),
		// nextCalendarDay);
	}

	public void testGetLastAlarmCalendarDay_LastBreakIs21DaysAgoAndTypeIsRing_ExpectedCalendarIs14DaysAgo() {
		this.setupCalendarWithLastBreakAgoInDays(21,
				ContraceptiveType.CONTRACEPTION_RING);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getLastCalendarDayForAlarm();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR) - 14);

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	public void testGetLastAlarmCalendarDay_LastBreakIs7DaysAgoAndTypeIsRing_ExpectedCalendarIs0DaysAgo() {
		this.setupCalendarWithLastBreakAgoInDays(7,
				ContraceptiveType.CONTRACEPTION_RING);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getLastCalendarDayForAlarm();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR));

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	public void testGetLastAlarmCalendarDay_LastBreakIs6DaysAgoAndTypeIsRing_ExpectedCalendarIsTomorrow() {
		this.setupCalendarWithLastBreakAgoInDays(6,
				ContraceptiveType.CONTRACEPTION_RING);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getLastCalendarDayForAlarm();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR) + 1);

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	public void testGetLastAlarmCalendarDay_LastBreakIs21DaysAgoAndTypeIsPatch_ExpectedCalendarIsToday() {
		this.setupCalendarWithLastBreakAgoInDays(21,
				ContraceptiveType.CONTRACEPTION_PATCH);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getLastCalendarDayForAlarm();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR));

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	public void testGetLastAlarmCalendarDay_LastBreakIs7DaysAgoAndTypeIsPatch_ExpectedCalendarIsIn2Weeks() {
		this.setupCalendarWithLastBreakAgoInDays(7,
				ContraceptiveType.CONTRACEPTION_PATCH);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getLastCalendarDayForAlarm();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR) + 14);

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	public void testGetLastAlarmCalendarDay_LastBreakIs21DaysAgoAndTypeIsPill_ExpectedCalendarIsIn7Days() {
		this.setupCalendarWithLastBreakAgoInDays(21,
				ContraceptiveType.CONTRACEPTION_PILL);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getLastCalendarDayForAlarm();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR) + 7);

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	public void testGetLastAlarmCalendarDay_LastBreakIs7DaysAgoAndTypeIsPill_ExpectedCalendarIsIn3Weeks() {
		this.setupCalendarWithLastBreakAgoInDays(7,
				ContraceptiveType.CONTRACEPTION_PILL);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getLastCalendarDayForAlarm();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR) + 21);

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	private void setupCalendarWithLastBreakAgoInDays(int lastBreakAgoInDays,
			ContraceptiveType contraceptiveType) {
		this.calendar.set(Calendar.DAY_OF_YEAR,
				this.calendar.get(Calendar.DAY_OF_YEAR) - lastBreakAgoInDays);
		this.calendar.set(Calendar.MINUTE,
				this.calendar.get(Calendar.MINUTE) - 5);

		this.alarmData.setLastBreak(this.calendar);
		this.alarmData.setContraceptiveType(contraceptiveType);
	}

	public void testGetFirstAlarmCalendarDayAfterBreak_LastBreakIs21DaysAgoAndTypeIsRing_ExpectedCalendarIs14DaysAgo() {
		this.setupCalendarWithLastBreakAgoInDays(21,
				ContraceptiveType.CONTRACEPTION_RING);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getFirstAlarmCalendarDayAfterBreak();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR) + 14);

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	public void testGetFirstAlarmCalendarDayAfterBreak_LastBreakIs7DaysAgoAndTypeIsRing_ExpectedCalendarIsToday() {
		this.setupCalendarWithLastBreakAgoInDays(7,
				ContraceptiveType.CONTRACEPTION_RING);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getFirstAlarmCalendarDayAfterBreak();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR)+28);

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	public void testGetFirstAlarmCalendarDayAfterBreak_LastBreakIs6DaysAgoAndTypeIsRing_ExpectedCalendarIsToday() {
		this.setupCalendarWithLastBreakAgoInDays(6,
				ContraceptiveType.CONTRACEPTION_RING);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getFirstAlarmCalendarDayAfterBreak();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR));

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	public void testGetFirstAlarmCalendarDayAfterBreak_LastBreakIs21DaysAgoAndTypeIsPatch_ExpectedCalendarIsIn14Days() {
		this.setupCalendarWithLastBreakAgoInDays(21,
				ContraceptiveType.CONTRACEPTION_PATCH);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getFirstAlarmCalendarDayAfterBreak();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR) + 14);

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	public void testGetFirstAlarmCalendarDayAfterBreak_LastBreakIs7DaysAgoAndTypeIsPatch_ExpectedCalendarIsToday() {
		this.setupCalendarWithLastBreakAgoInDays(7,
				ContraceptiveType.CONTRACEPTION_PATCH);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getFirstAlarmCalendarDayAfterBreak();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR));

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	public void testGetFirstAlarmCalendarDayAfterBreak_LastBreakIs21DaysAgoAndTypeIsPill_ExpectedCalendarIsIn14Days() {
		this.setupCalendarWithLastBreakAgoInDays(21,
				ContraceptiveType.CONTRACEPTION_PILL);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getFirstAlarmCalendarDayAfterBreak();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR) + 14);

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}

	public void testGetFirstAlarmCalendarDayAfterBreak_LastBreakIs7DaysAgoAndTypeIsPill_ExpectedCalendarIsIn4Weeks() {
		this.setupCalendarWithLastBreakAgoInDays(7,
				ContraceptiveType.CONTRACEPTION_PILL);

		Calendar lastAlarmCalendarDay = this.alarmData
				.getFirstAlarmCalendarDayAfterBreak();

		Calendar actualCalendarDay = CalendarWrapper.getActualCalendar();
		actualCalendarDay.set(Calendar.DAY_OF_YEAR,
				actualCalendarDay.get(Calendar.DAY_OF_YEAR) + 28);

		Assert.assertEquals(actualCalendarDay.get(Calendar.DAY_OF_YEAR),
				lastAlarmCalendarDay.get(Calendar.DAY_OF_YEAR));
	}
}